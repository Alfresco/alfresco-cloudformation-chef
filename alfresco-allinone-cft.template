{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "** Version 2.0 ** This template will run an Alfresco allinone server",
    "Parameters": {
        "AlfrescoInstanceType": {
            "Default": "m3.medium",
            "Description": "Type of EC2 instance for the Alfresco instances (Share + Repository)",
            "Type": "String",
            "AllowedValues": [
                "t2.large",
                "m4.large",
                "m3.medium",
                "m3.large",
                "c4.large",
                "c3.large",
                "r3.large"
            ],
            "ConstraintDescription": "Must contain valid instance type"
        },
        "RDSInstanceType": {
            "Default": "db.m1.small",
            "Description": "Type of EC2 instance for the MySQL DB instances",
            "Type": "String",
            "AllowedValues": [
                "db.m1.small",
                "db.m3.medium",
                "db.t2.medium",
                "db.m1.medium"
            ],
            "ConstraintDescription": "Must contain valid RDS instance type"
        },
        "RDSDBName": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "DB Name for the RDS MySQL database"
        },
        "RDSUsername": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "Username for the RDS MySQL database"
        },
        "RDSPassword": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "Password for the RDS MySQL database, by default: alfresco",
            "NoEcho": "TRUE"
        },
        "S3BucketName": {
            "Type": "String",
            "Default": "your-company-unique-name-alf-12345",
            "Description": "Name of the S3 bucket that Alfresco should use to store data. Note: This bucket will be created, enter a unique name"
        },
        "AlfrescoPassword": {
            "Type": "String",
            "Description": "Password for the Alfresco admin user, default is admin or add a MD4 format password, i.e. for admin (printf %s admin | iconv -t utf16le | openssl md4)",
            "Default": "admin",
            "NoEcho": "TRUE"
        },
        "AlfrescoTrialLicense": {
            "Type": "String",
            "Description": "URL of your Alfresco trial license *with clustering enabled*. If you don't have one, please ask for it to your Sales representative or to Alfresco Support via http://support.alfresco.com",
            "Default": "type a public URL here, i.e. a S3 url with your license"
        },
        "ArtifactRepoUsername": {
            "Type": "String",
            "Default": "maven-enterprise-trial",
            "Description": "Username for the Alfresco artifact repository. Leave this value by default."
        },
        "ArtifactRepoPassword": {
            "Type": "String",
            "Description": "Password for the Alfresco artifact repository user. Leave this value by default.",
            "Default": "trialuser",
            "NoEcho": "TRUE"
        }
    },
    "Mappings": {
        "ALINUXAMI": {
            "us-east-1": {
                "AMI": "ami-96a818fe"
            }
        }
    },
    "Resources": {
        "AlfrescoUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Policies": [
                    {
                        "PolicyName": "cfn-and-s3",
                        "PolicyDocument": {
                            "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Action": "cloudformation:DescribeStackResource",
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": "elasticloadbalancing:*",
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "autoscaling:*"
                                  ],
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                    "ec2:*"
                                  ],
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "cloudwatch:PutMetricData",
                                      "cloudwatch:EnableAlarmActions",
                                      "cloudwatch:PutMetricAlarm"
                                  ],
                                  "Resource": "*"
                              },
                              {
                                  "Resource": "*",
                                    "Action": [
                                        "s3:List*"
                                    ],
                                    "Effect": "Allow"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "s3:*"
                                  ],
                                  "Resource": {
                                      "Fn::Join": [
                                          "",
                                          [
                                              "arn:aws:s3:::",
                                              {
                                                  "Ref": "S3Bucket"
                                              },
                                              "/*"
                                          ]
                                      ]
                                  }
                              }
                            ]
                        }
                    }
                ]
            }
        },
        "CfnKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "AlfrescoUser"
                }
            }
        },
        "RDSSecurityGroup": {
            "Type": "AWS::RDS::DBSecurityGroup",
            "Properties": {
                "GroupDescription": "Allow AlfrescoSecurityGroup access to RDS DB",
                "DBSecurityGroupIngress": [
                    {
                        "EC2SecurityGroupId": {
                            "Ref": "AlfrescoSecurityGroup"
                        }
                    }
                ]
            }
        },
        "RDSDBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "MultiAZ": "true",
                "DBSecurityGroups": [
                    {
                        "Ref": "RDSSecurityGroup"
                    }
                ],
                "AllocatedStorage": "5",
                "DBInstanceClass": {
                    "Ref": "RDSInstanceType"
                },
                "Engine": "MySQL",
                "MasterUsername": {
                    "Ref": "RDSUsername"
                },
                "MasterUserPassword": {
                    "Ref": "RDSPassword"
                },
                "DBName": {
                    "Ref": "RDSDBName"
                }
            },
            "DeletionPolicy": "Snapshot"
        },
        "S3Bucket":{
            "Type" : "AWS::S3::Bucket",
            "DeletionPolicy" : "Delete",
            "Properties": {
              "BucketName": {"Ref":"S3BucketName"},
              "AccessControl": "BucketOwnerFullControl"
            }
        },
        "AlfrescoSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the Alfresco One instances",
                "SecurityGroupIngress": [
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "80",
                      "ToPort": "80"
                  },
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "443",
                      "ToPort": "443"
                }]
            }
        },
        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AlfrescoSetup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "cloudformation:DescribeStackResource",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                      "ec2:*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData",
                                        "cloudwatch:EnableAlarmActions",
                                        "cloudwatch:PutMetricAlarm"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Resource": "*",
                                      "Action": [
                                          "s3:List*"
                                      ],
                                      "Effect": "Allow"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "S3Bucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SetupRole"
                    }
                ]
            }
        },
        "AlfrescoInstance" : {
          "Type" : "AWS::EC2::Instance",
          "Properties" : {
            "ImageId" : {
              "Fn::FindInMap": [
                "ALINUXAMI",
                {
                  "Ref": "AWS::Region"
                },
                "AMI"
              ]
            },
            "InstanceMonitoring":"true",
            "IamInstanceProfile": {
              "Ref": "SetupRoleProfile"
            },
            "InstanceType": {
              "Ref": "AlfrescoInstanceType"
            },
            "SecurityGroups":[
              {
                "Ref":"AlfrescoSecurityGroup"
              }
            ],
            "UserData": {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/bin/bash -v\n",
                    "export COOKBOOKS_URL=https://artifacts.alfresco.com/nexus/service/local/repositories/releases/content/org/alfresco/devops/chef-alfresco/0.6.9/chef-alfresco-0.6.9.tar.gz\n",
                    "export CHEF_NODE_NAME=allinone\n",
                    "export CHEF_INSTANCE_TEMPLATE=https://raw.githubusercontent.com/maoo/alfresco-boxes/newchefalfresco/instance-templates/allinone-community.json\n",
                    "export LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                    "export LOCALNAME=$(curl http://169.254.169.254/latest/meta-data/local-hostname)\n",
                    "export LOCALSHORTNAME=$(curl http://169.254.169.254/latest/meta-data/hostname|awk -F. '{print $1}')\n",
                    "semanage port -a -t http_port_t -p tcp 2100\n",
                    "semanage permissive -a httpd_t\n",
                    "semanage permissive -a haproxy_t\n",
                    "CHEF_LOCAL_YAML_VARS_URL=file://$WORK_DIR/local-vars.yaml\n",
                    "cat > $CHEF_LOCAL_YAML_VARS_URL << 'EOF'\n",
                    "---\n",
                    "artifact-deployer:\n",
                    "  maven:\n",
                    "    repositories:\n",
                    "      private:\n",
                    "        username: '",
                    {"Ref": "ArtifactRepoUsername"},
                    "'\n",
                    "        password: '",
                    {"Ref": "ArtifactRepoPassword"},
                    "'\n",
                    "alfresco:\n",
                    "  public_hostname: 'localhost'\n",
                    "  properties:\n",
                    "    s3.accessKey: '",
                    {"Ref":"CfnKeys"},
                    "'\n",
                    "    s3.secretKey: '",
                    {"Fn::GetAtt":["CfnKeys","SecretAccessKey"]},
                    "'\n",
                    "    hz_aws_access_key: '",
                    {"Ref":"CfnKeys"},
                    "'\n",
                    "    hz_aws_secret_key: '",
                    {"Fn::GetAtt":["CfnKeys","SecretAccessKey"]},
                    "'\n",
                    "    db.host: '",
                    {"Fn::GetAtt": ["RDSDBInstance","Endpoint.Address"]},
                    "'\n",
                    "    db.dbname: '",
                    {"Ref": "RDSDBName"},
                    "'\n",
                    "    db.username: '",
                    {"Ref": "RDSUsername"},
                    "'\n",
                    "    db.password: '",
                    {"Ref": "RDSPassword"},
                    "'\n",
                    "    s3.bucketName: '",
                    {"Ref": "S3BucketName"},
                    "'\n",
                    "    s3.bucketLocation: '",
                    {"Ref": "AWS::Region"},
                    "'\n",
                    "    s3.bucketRegion: '",
                    {"Ref": "AWS::Region"},
                    "'\n",
                    "    s3service.s3-endpoint: 's3-",
                    {"Ref": "AWS::Region"},
                    ".amazonaws.com'\n",
                    "    hz_aws_sg_name: 'AWS_SG_NAME'\n",
                    "EOF\n",
                    "curl -L https://raw.githubusercontent.com/maoo/alfresco-boxes/newchefalfresco/scripts/provisioning-libs.rb > provisioning-libs.rb\n",
                    "curl -L https://raw.githubusercontent.com/maoo/alfresco-boxes/newchefalfresco/scripts/chef-bootstrap.rb > chef-bootstrap.rb\n",
                    "ruby chef-bootstrap.rb\n"
                  ]
                ]
              }
            }
          }
        }
    },
    "Outputs": {
      "AlfrescoServerOutput": {
        "Description": "Wait for 15 more minutes and then go URL below to the ELB serving the Alfresco Share login page:",
          "Value": {
            "Fn::Join": [
                "",
                [ "http://", { "Fn::GetAtt": [ "AlfrescoInstance", "PublicDnsName" ] }, "/share" ]
            ]
        }
    }
  }
}
