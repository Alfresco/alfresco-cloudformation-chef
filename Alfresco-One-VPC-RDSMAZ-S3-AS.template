{
    "AWSTemplateFormatVersion": "2015-10-12",
    "Description": "**Version 2.0 ** This template will create a new VPC, and deploy an Alfresco cluster behind an ELB in 2 availabiltiy zones, the cluster will be configured to use an S3 bucket for storage, a local cache on ephemeral volumes, and an multi-AZ MySQL RDS instance will be used as the database. **This version only supports all AWS regions except GovCloud**",
    "Parameters": {
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair, all instances will launch with this KeyPair"
        },
        "OperatorEMail": {
            "Description": "EMail address to notify if there are any scaling operations",
            "Type": "String",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "Must be a valid email address."
        },
        "SSHFrom": {
            "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x."
        },
        "AZ1": {
            "Type": "String",
            "Description": "First availabiltiy zone to deploy into",
            "AllowedValues": [
                "eu-west-1a",
                "eu-west-1b",
                "eu-west-1c",
                "eu-central-1a",
                "eu-central-1b",
                "us-east-1a",
                "us-east-1b",
                "us-east-1c",
                "us-east-1d",
                "us-west-1a",
                "us-west-1b",
                "us-west-1c",
                "ap-southeast-1a",
                "ap-southeast-1b",
                "ap-northeast-1a",
                "ap-northeast-1b",
                "ap-northeast-1c",
                "us-west-2a",
                "us-west-2b",
                "us-west-2c",
                "sa-east-1a",
                "sa-east-1b, ap2-southeast-1b, ap2-southeast-1a"
            ],
            "ConstraintDescription": "Must be a valid EC2 Availabilty zone"
        },
        "AZ2": {
            "Type": "String",
            "Description": "Second availabiltiy zone to deploy into (must be the same region as for AZ1)",
            "AllowedValues": [
                "eu-west-1a",
                "eu-west-1b",
                "eu-west-1c",
                "eu-central-1a",
                "eu-central-1b",
                "us-east-1a",
                "us-east-1b",
                "us-east-1c",
                "us-east-1d",
                "us-west-1a",
                "us-west-1b",
                "us-west-1c",
                "ap-southeast-1a",
                "ap-southeast-1b",
                "ap-northeast-1a",
                "ap-northeast-1b",
                "ap-northeast-1c",
                "us-west-2a",
                "us-west-2b",
                "us-west-2c",
                "sa-east-1a",
                "sa-east-1b, ap2-southeast-1b, ap2-southeast-1a"
            ],
            "ConstraintDescription": "Must be a valid EC2 Availabilty zone"
        },
        "AlfrescoInstanceType": {
            "Default": "m1.xlarge",
            "Description": "Type of EC2 instance for the Alfresco instances (Share + Repository)",
            "Type": "String",
            "AllowedValues": [
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type"
        },
        "IndexInstanceType": {
            "Default": "m1.xlarge",
            "Description": "Type of EC2 instance for the Alfresco Index instances (Solr)",
            "Type": "String",
            "AllowedValues": [
                "t2.medium",
                "t2.large",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type"
        },
        "NATInstanceType": {
            "Default": "m1.small",
            "Description": "Type of EC2 instance for the NAT instances",
            "Type": "String",
            "AllowedValues": [
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge"
            ],
            "ConstraintDescription": "Must contain valid instance type, valid are: m1.small, m1.medium, m1.large, m1.xlarge"
        },
        "RDSInstanceType": {
            "Default": "db.m1.small",
            "Description": "Type of EC2 instance for the MySQL DB instances",
            "Type": "String",
            "AllowedValues": [
                "db.t1.micro",
                "db.m1.small",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.cr1.8xlarge",
                "db.m1.medium",
                "db.m1.large",
                "db.m1.xlarge"
            ],
            "ConstraintDescription": "Must contain valid RDS instance type"
        },
        "RDSDBName": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "DB Name for the RDS MySQL database"
        },
        "RDSUsername": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "Username for the RDS MySQL database"
        },
        "RDSPassword": {
            "Default": "alfresco",
            "Type": "String",
            "Description": "Password for the RDS MySQL database, by default: alfresco",
            "NoEcho": "TRUE"
        },
        "AlfrescoPassword": {
            "Type": "String",
            "Description": "Password for the Alfresco admin user",
            "NoEcho": "TRUE"
        },
        "S3Bucket": {
            "Type": "String",
            "Default": "your-company-unique-name-alf-12345",
            "Description": "Name of the S3 bucket that Alfresco should use to store data. Note: This bucket will be created, enter a unique name"
        }
    },
    "Mappings": {
        "ALINUXAMI": {
            "us-east-1": {
                "AMI": "ami-96a818fe"
            },
            "us-west-2": {
                "AMI": "ami-c7d092f7"
            },
            "us-west-1": {
                "AMI": "ami-6bcfc42e"
            },
            "eu-west-1": {
                "AMI": "ami-e4ff5c93"
            },
            "eu-central-1": {
                "AMI": "ami-7cc4f661"
            },
            "ap-southeast-1": {
                "AMI": "ami-aea582fc"
            },
            "ap-southeast-2": {
                "AMI": "ami-bd523087"
            },
            "ap-northeast-1": {
                "AMI": "ami-89634988"
            },
            "sa-east-1": {
                "AMI": "ami-bf9520a2"
            }
        },
        "AWSNATAMI": {
            "us-east-1": {
                "AMI": "ami-4c9e4b24"
            },
            "us-west-2": {
                "AMI": "ami-bb69128b"
            },
            "us-west-1": {
                "AMI": "ami-2b2b296e"
            },
            "eu-west-1": {
                "AMI": "ami-3760b040"
            },
            "eu-central-1": {
                "AMI": "ami-204c7a3d"
            },
            "ap-southeast-1": {
                "AMI": "ami-b082dae2"
            },
            "ap-southeast-2": {
                "AMI": "ami-996402a3"
            },
            "ap-northeast-1": {
                "AMI": "ami-55c29e54"
            },
            "sa-east-1": {
                "AMI": "ami-b972dba4"
            }
        },
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/16"
            },
            "NAT1": {
                "CIDR": "10.0.1.0/24"
            },
            "NAT2": {
                "CIDR": "10.0.2.0/24"
            },
            "Alfresco1": {
                "CIDR": "10.0.10.0/27"
            },
            "Alfresco2": {
                "CIDR": "10.0.20.0/27"
            },
            "RDS1": {
                "CIDR": "10.0.100.0/24"
            },
            "RDS2": {
                "CIDR": "10.0.200.0/24"
            }
        }
    },
    "Outputs": {
        "AlfrescoServerOutput": {
            "Description": "URL to the ELB serving the Alfresco cluster",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        },
                        "/share"
                    ]
                ]
            }
        }
    },
    "Resources": {
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEMail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco Cluster behind ELB with S3 for shared storage and RDS (MySQL) for database"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "AlfrescoSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Alfresco1",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ1"
                }
            }
        },
        "AlfrescoSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "Alfresco2",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "Alfresco"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ2"
                }
            }
        },
        "NATSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "NAT1",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "NAT"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ1"
                }
            }
        },
        "NATSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "NAT2",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "NAT"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AZ2"
                }
            }
        },
        "NATInstance1": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT Instance"
                    }
                ],
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "NATInterface1"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSNATAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                }
            }
        },
        "NATInstance2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT Instance"
                    }
                ],
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "NATInterface2"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSNATAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                }
            }
        },
        "NATEIP1": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATEIP2": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATInterface1": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "NATSubnet1"
                },
                "Description": "External interface for the NAT instance in AZ1",
                "GroupSet": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "NATInterface2": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "NATSubnet2"
                },
                "Description": "External interface for the NAT instance in AZ1",
                "GroupSet": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "AssociateInterfaceNAT1": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATEIP1",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "NATInterface1"
                }
            }
        },
        "AssociateInterfaceNAT2": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATEIP2",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "NATInterface2"
                }
            }
        },
        "NATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "VPC",
                                "CIDR"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHFrom"
                        }
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco2",
                                "CIDR"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco1",
                                "CIDR"
                            ]
                        }
                    }
                ]
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "NATSubnet1"
                    },
                    {
                        "Ref": "NATSubnet2"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "AppCookieStickinessPolicy": [
                    {
                        "CookieName": "jsessionid",
                        "PolicyName": "AlfrescoCluster"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": [
                            "AlfrescoCluster"
                        ]
                    }
                ],
                "HealthCheck": {
                    "Target": {
                        "Fn::Join": [
                            "",
                            [
                                "HTTP:",
                                "80",
                                "/alfresco"
                            ]
                        ]
                    },
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "3",
                    "Interval": "30",
                    "Timeout": "3"
                }
            }
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the ELB",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco1",
                                "CIDR"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "Alfresco2",
                                "CIDR"
                            ]
                        }
                    }
                ]
            }
        },
        "WaitForAlfrescoInstall": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "AlfrescoInstance",
            "Properties": {
                "Handle": {
                    "Ref": "WaitForAlfrescoInstallWaitHandle"
                },
                "Timeout": "1700"
            }
        },
        "WaitForAlfrescoInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "AlfrescoInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "AlfrescoSubnet1"
                },
                "Description": "External interface for Alfresco server",
                "GroupSet": [
                    {
                        "Ref": "AlfrescoSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "AlfrescoInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "AlfrescoInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "ALINUXAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdh",
                        "VirtualName": "ephemeral0"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "export SKIP_CHEF_RUN=true",
                                "export NODE_NAME=allinone",
                                "curl -L https://raw.githubusercontent.com/Alfresco/chef-alfresco/master/install-alfresco.sh --no-sessionid | bash -s",
                                "sed -i 's/@@ARTIFACT_REPO_USERNAME@@/",
                                {
                                    "Ref": "AWS::ArtifactRepoUsername"
                                },
                                "sed -i 's/@@ARTIFACT_REPO_PASSWORD@@/",
                                {
                                    "Ref": "AWS::ArtifactRepoPassword"
                                },
                                "sed -i 's/@@STACK_NAME@@/",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@FQDN@@/",
                                {
                                    "Fn::GetAtt": [
                                        "ElasticLoadBalancer",
                                        "DNSName"
                                    ]
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@AWS_ACCESS_KEY@@/",
                                {
                                    "Ref": "CFNKeys"
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@AWS_SECRET_KEY@@/",
                                {
                                    "Fn::GetAtt": [
                                        "CFNKeys",
                                        "SecretAccessKey"
                                    ]
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@DB_HOST@@/",
                                {
                                    "Fn::GetAtt": [
                                        "RDSDBinstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@DB_NAME@@/",
                                {
                                    "Ref": "RDSDBName"
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@DB_USERNAME@@/",
                                {
                                    "Ref": "RDSUsername"
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@DB_PASSWORD@@/",
                                {
                                    "Ref": "RDSPassword"
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@CONTENTSTORE_S3_BUCKET@@/",
                                {
                                    "Ref": "S3Bucket"
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@AWS_REGION@@/",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "/g' /etc/chef/attributes.json",
                                "sed -i 's/@@AWS_SG_NAME@@/AlfrescoSecurityGroup/g' /etc/chef/attributes.json",
                                "cd /etc/chef; chef-client -z -j /etc/chef/attributes.json"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "AlfrescoInstanceType"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "Install": [
                            "Install"
                        ]
                    },
                    "Install": {
                        "packages": {
                            "yum": {
                                "ntp": []
                            }
                        }
                    }
                }
            }
        }
    },
    "RDSSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": {
                "Fn::FindInMap": [
                    "SubnetConfig",
                    "RDS1",
                    "CIDR"
                ]
            },
            "Tags": [
                {
                    "Key": "Application",
                    "Value": "RDS"
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ],
            "AvailabilityZone": {
                "Ref": "AZ1"
            }
        }
    },
    "RDSSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "CidrBlock": {
                "Fn::FindInMap": [
                    "SubnetConfig",
                    "RDS2",
                    "CIDR"
                ]
            },
            "Tags": [
                {
                    "Key": "Application",
                    "Value": "RDS"
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ],
            "AvailabilityZone": {
                "Ref": "AZ2"
            }
        }
    },
    "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Application",
                    "Value": "ELB and NAT Instance"
                }
            ]
        }
    },
    "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "Properties": {
            "RouteTableId": {
                "Ref": "PublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
                "Ref": "InternetGateway"
            }
        }
    },
    "AlfrescoRouteTable1": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Application",
                    "Value": "Alfresco"
                }
            ]
        }
    },
    "AlfrescoRoute1": {
        "Type": "AWS::EC2::Route",
        "Properties": {
            "RouteTableId": {
                "Ref": "AlfrescoRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "InstanceId": {
                "Ref": "NATInstance1"
            }
        }
    },
    "AlfrescoRouteTable2": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Application",
                    "Value": "Alfresco"
                }
            ]
        }
    },
    "AlfrescoRoute2": {
        "Type": "AWS::EC2::Route",
        "Properties": {
            "RouteTableId": {
                "Ref": "AlfrescoRouteTable2"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "InstanceId": {
                "Ref": "NATInstance2"
            }
        }
    },
    "PublicNetworkAcl": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Application",
                    "Value": "ELB and NAT Instance"
                },
                {
                    "Key": "Network",
                    "Value": "Public"
                }
            ]
        }
    },
    "PublicSubnetRouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "NATSubnet1"
            },
            "RouteTableId": {
                "Ref": "PublicRouteTable"
            }
        }
    },
    "PublicSubnetRouteTableAssociation2": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "NATSubnet2"
            },
            "RouteTableId": {
                "Ref": "PublicRouteTable"
            }
        }
    },
    "AlfrescoSubnetRouteTableAssociation1": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "AlfrescoSubnet1"
            },
            "RouteTableId": {
                "Ref": "AlfrescoRouteTable"
            }
        }
    },
    "AlfrescoSubnetRouteTableAssociation2": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "AlfrescoSubnet2"
            },
            "RouteTableId": {
                "Ref": "AlfrescoRouteTable2"
            }
        }
    },
    "InboundPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
            "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
            },
            "RuleNumber": "100",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0",
            "PortRange": {
                "From": "0",
                "To": "65535"
            }
        }
    },
    "OutBoundPublicNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
            "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
            },
            "RuleNumber": "101",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0",
            "PortRange": {
                "From": "0",
                "To": "65535"
            }
        }
    },
    "AlfrescoSubnetNetworkAclAssociation1": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "AlfrescoSubnet1"
            },
            "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
            }
        }
    },
    "AlfrescoSubnetNetworkAclAssociation2": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "AlfrescoSubnet2"
            },
            "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
            }
        }
    },
    "PublicSubnetNetworkAclAssociation1": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "NATSubnet1"
            },
            "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
            }
        }
    },
    "PublicSubnetNetworkAclAssociation2": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "NATSubnet2"
            },
            "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
            }
        }
    },
    "RDSNetworkAcl": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Application",
                    "Value": "RDS Instance (MySQL)"
                },
                {
                    "Key": "Network",
                    "Value": "Private"
                }
            ]
        }
    },
    "InboundRDSNetworkAclEntry1": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
            "NetworkAclId": {
                "Ref": "RDSNetworkAcl"
            },
            "RuleNumber": "100",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": {
                "Fn::FindInMap": [
                    "SubnetConfig",
                    "Alfresco1",
                    "CIDR"
                ]
            },
            "PortRange": {
                "From": "3306",
                "To": "3306"
            }
        }
    },
    "InboundRDSNetworkAclEntry2": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
            "NetworkAclId": {
                "Ref": "RDSNetworkAcl"
            },
            "RuleNumber": "101",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": {
                "Fn::FindInMap": [
                    "SubnetConfig",
                    "Alfresco2",
                    "CIDR"
                ]
            },
            "PortRange": {
                "From": "3306",
                "To": "3306"
            }
        }
    },
    "OutBoundRDSNetworkAclEntry": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
            "NetworkAclId": {
                "Ref": "RDSNetworkAcl"
            },
            "RuleNumber": "101",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0",
            "PortRange": {
                "From": "0",
                "To": "65535"
            }
        }
    },
    "RDSSubnetNetworkAclAssociation1": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "RDSSubnet1"
            },
            "NetworkAclId": {
                "Ref": "RDSNetworkAcl"
            }
        }
    },
    "RDSSubnetNetworkAclAssociation2": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "RDSSubnet2"
            },
            "NetworkAclId": {
                "Ref": "RDSNetworkAcl"
            }
        }
    },
    "AlfrescoRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            },
            "Path": "/",
            "Policies": [
                {
                    "PolicyName": "AlfrescoCluster",
                    "PolicyDocument": {
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": "cloudformation:DescribeStackResource",
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": "EC2:Describe*",
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": "cloudwatch:PutMetricData",
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:GetObject",
                                    "s3:PutObject",
                                    "s3:DeleteObject",
                                    "s3:ListBucket",
                                    "s3:Get*",
                                    "s3:CreateBucket",
                                    "s3:List*"
                                ],
                                "Resource": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:List*"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
                }
            ]
        }
    },
    "AlfrescoRoleProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
            "Path": "/",
            "Roles": [
                {
                    "Ref": "AlfrescoRole"
                }
            ]
        }
    },
    "SetupRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            },
            "Path": "/",
            "Policies": [
                {
                    "PolicyName": "AlfrescoSetup",
                    "PolicyDocument": {
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": "cloudformation:DescribeStackResource",
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "EC2:Describe*",
                                    "EC2:CreateImage",
                                    "ec2:TerminateInstances"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": "elasticloadbalancing:DescribeLoadBalancers",
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "autoscaling:create*",
                                    "autoscaling:put*",
                                    "autoscaling:DescribePolicies"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": "iam:PassRole",
                                "Resource": {
                                    "Fn::GetAtt": [
                                        "AlfrescoRole",
                                        "Arn"
                                    ]
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "cloudwatch:PutMetricData",
                                    "cloudwatch:EnableAlarmActions",
                                    "cloudwatch:PutMetricAlarm"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:GetObject",
                                    "s3:PutObject",
                                    "s3:DeleteObject",
                                    "s3:ListBucket",
                                    "s3:Get*",
                                    "s3:List*"
                                ],
                                "Resource": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:List*"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
                }
            ]
        }
    },
    "SetupRoleProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
            "Path": "/",
            "Roles": [
                {
                    "Ref": "SetupRole"
                }
            ]
        }
    },
    "AlfrescoUser": {
        "Type": "AWS::IAM::User",
        "Properties": {
            "Policies": [
                {
                    "PolicyName": "cfn-and-s3",
                    "PolicyDocument": {
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": "cloudformation:DescribeStackResource",
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": "EC2:Describe*",
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": "cloudwatch:PutMetricData",
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:GetObject",
                                    "s3:PutObject",
                                    "s3:DeleteObject",
                                    "s3:ListBucket",
                                    "s3:Get*",
                                    "s3:List*"
                                ],
                                "Resource": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            },
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:List*"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
                }
            ]
        }
    },
    "CFNKeys": {
        "Type": "AWS::IAM::AccessKey",
        "Properties": {
            "UserName": {
                "Ref": "AlfrescoUser"
            }
        }
    },
    "AlfrescoSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription": "Allow access to the Alfresco Enterprise instance",
            "VpcId": {
                "Ref": "VPC"
            },
            "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "8080",
                    "ToPort": "8080",
                    "SourceSecurityGroupId": {
                        "Ref": "ELBSecurityGroup"
                    }
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "5800",
                    "ToPort": "5810",
                    "CidrIp": {
                        "Fn::FindInMap": [
                            "SubnetConfig",
                            "Alfresco1",
                            "CIDR"
                        ]
                    }
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "5800",
                    "ToPort": "5810",
                    "CidrIp": {
                        "Fn::FindInMap": [
                            "SubnetConfig",
                            "Alfresco2",
                            "CIDR"
                        ]
                    }
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Fn::GetAtt": [
                                        "NATInstance2",
                                        "PrivateIp"
                                    ]
                                },
                                "/32"
                            ]
                        ]
                    }
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Fn::GetAtt": [
                                        "NATInstance1",
                                        "PrivateIp"
                                    ]
                                },
                                "/32"
                            ]
                        ]
                    }
                }
            ],
            "SecurityGroupEgress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "0",
                    "ToPort": "65535",
                    "CidrIp": "0.0.0.0/0"
                }
            ]
        }
    },
    "RDSDBinstance": {
        "Type": "AWS::RDS::DBInstance",
        "Properties": {
            "MultiAZ": "true",
            "DBSecurityGroups": [
                {
                    "Ref": "RDSSecurityGroup"
                }
            ],
            "AllocatedStorage": "5",
            "DBInstanceClass": {
                "Ref": "RDSInstanceType"
            },
            "Engine": "MySQL",
            "MasterUsername": {
                "Ref": "RDSUsername"
            },
            "MasterUserPassword": {
                "Ref": "RDSPassword"
            },
            "DBSubnetGroupName": {
                "Ref": "RDSDBSubnetGroup"
            },
            "DBName": {
                "Ref": "RDSDBName"
            }
        },
        "DeletionPolicy": "Snapshot"
    },
    "RDSDBSubnetGroup": {
        "Type": "AWS::RDS::DBSubnetGroup",
        "Properties": {
            "DBSubnetGroupDescription": "description",
            "SubnetIds": [
                {
                    "Ref": "RDSSubnet1"
                },
                {
                    "Ref": "RDSSubnet2"
                }
            ]
        }
    },
    "RDSSecurityGroup": {
        "Type": "AWS::RDS::DBSecurityGroup",
        "Properties": {
            "EC2VpcId": {
                "Ref": "VPC"
            },
            "GroupDescription": "Allow AlfrescoSecurityGroup access to RDS DB",
            "DBSecurityGroupIngress": [
                {
                    "EC2SecurityGroupId": {
                        "Ref": "AlfrescoSecurityGroup"
                    }
                }
            ]
        }
    }
}
